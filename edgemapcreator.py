"""EdgeMapCreator

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VsLmcD6PJTDJDPyupFPuLxsbmfOpfeTS
"""

import torch
from PIL import Image

# Convert to grayscale
def img2tensor(filename):
  image = Image.open(filename)
  image = image.convert('L')
  image = torch.from_numpy(np.asarray(image)).unsqueeze(0).unsqueeze(0).double() / 255.0
  return image

# Sobel operator
import torch
import torch.nn.functional as F
import numpy as np

device = torch.device("cpu")
kernel_x = torch.DoubleTensor([[-1, 0, 1],
                               [-1, 0, 1],
                               [-1, 0, 1]]).unsqueeze(0).unsqueeze(0).to(device)
kernel_y = torch.DoubleTensor([[-1,-1,-1],
                               [0, 0, 0],
                               [1, 1, 1]]).unsqueeze(0).unsqueeze(0).to(device)
lapacian_operator = torch.DoubleTensor([[0, 1, 0],
                                        [1, -4, 1],
                                        [0, 1, 0]]).unsqueeze(0).unsqueeze(0).to(device)

def get_grads(image):
  grad_x = F.conv2d(image, kernel_x)
  grad_y = F.conv2d(image, kernel_y)
  grad_mag = (grad_x**2 + grad_y**2)**0.5
  laplacian = F.conv2d(image, lapacian_operator)
  return grad_mag, laplacian

import matplotlib.pyplot as plt
anime_image = img2tensor('samples.jpg')
plt.figure(figsize=(15, 15))
plt.imshow(get_grads(anime_image)[0].squeeze().squeeze())
plt.show()

image = img2tensor('dimakis-alex.jpg')
plt.figure(figsize=(15, 15))
plt.imshow(get_grads(image)[0].squeeze().squeeze(), cmap='gray')
plt.show()

image = img2tensor('dimakis-alex.jpg')
plt.figure(figsize=(15, 15))
plt.imshow(get_grads(image)[1].squeeze().squeeze(), cmap='gray')
plt.show()

